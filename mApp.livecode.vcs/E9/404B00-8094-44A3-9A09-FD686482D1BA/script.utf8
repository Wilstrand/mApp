local sSkipPreOpenCard = "true"
local sUIStack
local sSingleOrientationOnly
local sLayoutCompleted
local sPrefA
local sLastCardRect

before preOpenStack
   local tSubstacks,tIndex,tProps,tData,tAllowedOrientations
   try
      if (the owner of the target is empty and the target is me) or the long id of the owner of the target is the long id of me then
         ## UI STACK
         put the substacks of me into tSubstacks
         put 1 into tIndex
         repeat for each line tStack in tSubstacks
            put the mAppProps["UIStack"] of stack tStack into tProps
            if tProps is an array then
               put tProps into tData[tIndex]
               put tStack into tData[tIndex]["name"]
               add 1 to tIndex
            end if
         end repeat
         if the environment is "mobile" then
            if the platform = "iphone" and not mAppNativeResolutionIndependence() then
               iPhoneUseDeviceResolution true,true
            end if
            put _mAppFindBestStack(tData) into sUIStack
         else
            put tData[1]["name"] into sUIStack
         end if
         _mAppLoadPrefs
         -- toplevel appropriate stack
         -- tStack should be in the stackFiles so the short name should work here
         -- this way tStack could also be a substack which will be the default use case
         lock screen
         if there is a stack sUIStack then
            put the mAppProps["UIStack"] of stack sUIStack into tProps
            repeat for each item tOrientation in "portrait,portrait upside down,landscape left,landscape right"
               if tProps[tOrientation] then
                  put tOrientation&"," after tAllowedOrientations
               end if
            end repeat
            set the bufferHiddenImages to true
            if tProps["acceleratedRendering"] then
               set the acceleratedRendering of stack sUIStack to true
            end if
            delete char -1 of tAllowedOrientations
            if tAllowedOrientations contains "landscape" then
               if tAllowedOrientations contains "portrait" then
                  put false into sSingleOrientationOnly
               else
                  put true into sSingleOrientationOnly
               end if
            else
               put true into sSingleOrientationOnly
            end if
            if tAllowedOrientations = "" then put "portrait" into tAllowedOrientations
            if the environment is "mobile" then
               if not mAppNativeResolutionIndependence() then
                  set the textSize of me to round(the effective textSize of the target*mAppPixelDensity())
                  repeat for each line tSubstack in tSubstacks
                     if tSubstack contains " Templates " or \
                           word 1 of tSubstack is "mAppImages" then
                        dispatch "mAppScaleStack" to stack tSubStack
                     end if
                  end repeat
                  dispatch "mAppScaleStack" to stack sUIStack
               end if
               mobileSetAllowedOrientations tAllowedOrientations
            end if
            close this stack
            if the environment is "mobile" then
               set the rect of stack sUIStack to the working screenRect
            end if
            go stack sUIStack
         else
            answer error "Could not find stack "&sUIStack
         end if
         unlock screen
      end if
   catch e
      put e
   end try
   pass preOpenStack
end preOpenStack

function mAppUIStack
   return sUIStack
end mAppUIStack

function mAppPixelDensity
   if the environment is "mobile" and not mAppNativeResolutionIndependence() then
      return mobilePixelDensity()
   else
      return 1
   end if
end mAppPixelDensity

function mAppNativeResolutionIndependence
   set the itemDelimiter to "."
   return item 1 to 2 of the version >= 6.5
end mAppNativeResolutionIndependence

function mAppParadigm
   local tScreenSize
   put max(the width of stack sUIStack,the height of stack sUIStack)/mAppPixelDensity() into tScreenSize
   if tScreenSize < 800 then
      return "phone"
   else
      return "tablet"
   end if
end mAppParadigm

before resizeStack
   --update stack rules first
   lock screen
   dispatch "mAppUpdateLayout" to the owner of the target
   mAppUpdateLayout
   put true into sLayoutCompleted[the long id of the target]
   unlock screen
   pass resizeStack
end resizeStack

before preOpenCard
   try
      if not sSkipPreOpenCard then
         -- first check to see if the stack is single orientation and the card has already been laid out
         if the environment is "mobile" and sSingleOrientationOnly and sLayoutCompleted[the long id of the target] then pass preOpenCard
         lock screen
         mAppUpdateLayout
         put true into sLayoutCompleted[the long id of the target]
         unlock screen
      else
         put false into sSkipPreOpenCard
      end if
   end try
   pass preOpenCard
end preOpenCard

on mAppSetPref pName,pValue
   put pValue into sPrefA[pName]
   _mAppSavePrefs
end mAppSetPref

function mAppGetPref pName
   return sPrefA[pName]
end mAppGetPref

private command _mAppLoadPrefs
   local tPrefsPath
   put mAppSupportPath() into tPrefsPath
   if there is a file (tPrefsPath&"/mApp.dat") then
      try
         put arrayDecode(url ("binfile:"&tPrefsPath&"/mApp.dat")) into sPrefA
      end try
   end if
end _mAppLoadPrefs

private command _mAppSavePrefs
   local tPrefsPath
   put mAppSupportPath() into tPrefsPath
   put arrayEncode(sPrefA) into url ("binfile:"&tPrefsPath&"/mApp.dat")
end _mAppSavePrefs

function mAppSupportPath
   local tPrefsPath
   switch the platform
      case "iphone"
         put specialFolderPath("library") & "/" & iphoneApplicationIdentifier() into tPrefsPath
         break
      case "android"
         put specialFolderPath("documents")&"/.support" into tPrefsPath
         break
      case "MacOS"
      case "Win32"
         put specialFolderPath("support")&"/"&the cRevStandaloneSettings["OSX,identifier"] of me into tPrefsPath
         break
      case "Linux"
         put specialGolderPath("home")&"/."&&the cRevStandaloneSettings["name"] of me into tPrefsPath
         break
   end switch
   if there is not a folder tPrefsPath then
      create folder tPrefsPath
   end if
   return tPrefsPath
end mAppSupportPath

command mAppUpdateLayout
   local tProps,tIndexes
   mAppNotifyObservers "mAppWillUpdateLayout",the target
   put the mAppProps["layout"] of the target into tProps
   put the keys of tProps into tIndexes
   sort tIndexes numeric
   repeat for each line tIndex in tIndexes
      _mAppUpdateLayoutRule tProps[tIndex],mAppPixelDensity()
   end repeat
   mAppNotifyObservers "mAppDidUpdateLayout",the target
end mAppUpdateLayout

/* 

Public command for updating a layout rule.
Typically this would be used after moving one or more objects that the role uses for an edge.
For example, moving a button (handle) type control that sits between two areas of the screen that each have
their own rules depending on the control or animating a control onto the screen that a rule uses as an edge
but when off screen the edge is inline with the side of the card.

*/

command mAppUpdateLayoutRule pRuleName
   local tProps
   put the mAppProps["layout"] of the target into tProps
   repeat for each key tIndex in tProps
      if tProps[tIndex]["name"] = pRuleName then
         _mAppUpdateLayoutRule tProps[tIndex],mAppPixelDensity()
         exit repeat
      end if
   end repeat
end mAppUpdateLayoutRule

private command _mAppUpdateLayoutRule pRule,pScale
   local tList,tObjects,tRelativeObject,tRuleRect,tSize,tObjectWidth,tObjectHeight,tCardWidth,tActive="true",tRemainder,tRemainderShift
   put keys(pRule["objects"]) into tObjects
   sort tObjects numeric
   -- filter out any objects that don't exist
   repeat for each line tObjectIndex in tObjects
      if not exists(control id pRule["objects"][tObjectIndex]["id"] of the target) then
         filter tObjects without tObjectIndex
      end if
   end repeat
   if the number of lines of tObjects > 0 then
      -- work out what we do for this width
      put the width of this card / pScale into tCardWidth
      if pRule["active"]["min"] is an integer and tCardWidth < pRule["active"]["min"] or \
            pRule["active"]["max"] is an integer and tCardWidth > pRule["active"]["max"] then
         put false into tActive
      end if
      
      if tActive then
         -- work out what we do for this orientation
         if pRule["orientation"] is not "both" then 
            if the width of this cd > height of this cd then -- landscape
               if pRule["orientation"] is "portrait" then
                  put false into tActive
               end if
            else -- portrait
               if pRule["orientation"] is "landscape" then
                  put false into tActive
               end if
            end if
         end if
      end if
      
      if pRule["hide"] is true then
         repeat for each line tObjectIndex in tObjects
            set the visible of control id pRule["objects"][tObjectIndex]["id"] to tActive
         end repeat
      end if
      
      if tActive then
         -- allow the user to define a custom filter for rules
         dispatch function "mAppShouldRunRule" to the target with pRule["name"]
         if it is not "unhandled" then
            put the result into tActive
         end if
      end if
      
      if not tActive then
         exit _mAppUpdateLayoutRule
      end if
      
      -- calculate space to draw objects in
      --- first find fixed points
      repeat for each item tSide in "left,top,right,bottom"
         if pRule[tSide]["relative object"] = "card" then
            put the long id of this cd into tRelativeObject
         else
            put "control id "& pRule[tSide]["relative object"] into tRelativeObject
         end if
         if there is a tRelativeObject then
            switch pRule[tSide]["side of relative object"]
               case "left"
                  put round(the left of tRelativeObject +pRule[tSide]["relative distance"]*pScale) into tRuleRect[tSide]
                  break
               case "right"
                  put round(the right of tRelativeObject + pRule[tSide]["relative distance"]*pScale) into tRuleRect[tSide]
                  break
               case "top"
                  put round(the top of tRelativeObject + pRule[tSide]["relative distance"]*pScale) into tRuleRect[tSide]
                  break
               case "bottom"
                  put round(the bottom of tRelativeObject + pRule[tSide]["relative distance"]*pScale) into tRuleRect[tSide]
                  break
            end switch
         end if
      end repeat
      --- now use current size to fill in the blanks
      -- different depending on layout direction
      repeat for each item tSide in "left,top,right,bottom"
         if tRuleRect[tSide] = "" then
            if tList is not an array then
               repeat for each line tObjectIndex in tObjects
                  put the left of control id pRule["objects"][tObjectIndex]["id"] of the target &"," after tList["left"]
                  put the top of control id pRule["objects"][tObjectIndex]["id"] of the target &"," after tList["top"]
                  put the width of control id pRule["objects"][tObjectIndex]["id"] of the target &"," after tList["width"]
                  put the height of control id pRule["objects"][tObjectIndex]["id"] of the target &"," after tList["height"]
               end repeat
            end if
            switch tSide
               case "left"
                  if tRuleRect["right"] <> "" then
                     -- find max width of all objs in rule
                     if pRule["direction"] = "vertical" then
                        put tRuleRect["right"]-max(char 1 to -2 of tList["width"]) into tRuleRect["left"]
                     else
                        put round(tRuleRect["right"]-(sum(char 1 to -2 of tList["width"])+(pScale*pRule["padding"]*(the number of lines of tObjects-1)))) into tRuleRect["left"]
                     end if
                  else
                     put min(char 1 to -2 of tList["left"]) into tRuleRect["left"]
                  end if
                  break
               case "right"
                  -- left will already be set
                  -- find max right of all objs in rule
                  if pRule["direction"] = "vertical" then
                     put tRuleRect["left"]+max(char 1 to -2 of tList["width"]) into tRuleRect["right"]
                  else
                     put round(tRuleRect["left"]+(sum(char 1 to -2 of tList["width"])+(pScale*pRule["padding"]*(the number of lines of tObjects-1)))) into tRuleRect["right"]
                  end if
                  break
               case "top"
                  if tRuleRect["bottom"] <> "" then
                     -- find max height  of all objs in rule
                     if pRule["direction"] = "vertical" then
                        put round(tRuleRect["bottom"]-(sum(char 1 to -2 of tList["height"])+(pScale*pRule["padding"]*(the number of lines of tObjects-1)))) into tRuleRect["top"]
                     else
                        put tRuleRect["bottom"]-max(char 1 to -2 of tList["height"]) into tRuleRect["top"]
                     end if
                  else
                     put min(char 1 to -2 of tList["top"]) into  tRuleRect["top"]
                  end if
                  break
               case "bottom"
                  -- top will already be set
                  -- find max height  of all objs in rule
                  if pRule["direction"] = "vertical" then
                     put round(tRuleRect["top"]+(sum(char 1 to -2 of tList["height"])+(pScale*pRule["padding"]*(the number of lines of tObjects-1)))) into tRuleRect["bottom"]
                  else
                     put tRuleRect["top"]+max(char 1 to -2 of tList["height"]) into tRuleRect["bottom"]
                  end if
                  break
            end switch
         end if
         delete variable tList
      end repeat
      if pRule["type"] = "position" then
         -- need total width and height of all objects plus padding
         repeat for each line tObjectIndex in tObjects
            add the width of control id pRule["objects"][tObjectIndex]["id"] to tSize["width"]
            add the height of control id pRule["objects"][tObjectIndex]["id"] to tSize["height"]
         end repeat
         if pRule["direction"] = "horizontal" then
            add round(pScale*pRule["padding"]*(the number of lines of tObjects-1)) to tSize["width"]
         else
            add round(pScale*pRule["padding"]*(the number of lines of tObjects-1)) to tSize["height"]
         end if
         if tSize["width"] < tRuleRect["right"]-tRuleRect["left"] then
            add ((tRuleRect["right"]-tRuleRect["left"])-tSize["width"]) div 2 to tRuleRect["left"]
         end if
         if tSize["height"] < tRuleRect["bottom"]-tRuleRect["top"] then
            add ((tRuleRect["bottom"]-tRuleRect["top"])-tSize["height"]) div 2 to tRuleRect["top"]
         end if
      end if
      if pRule["type"] is "overlay" then
         repeat for each line tObjectIndex in tObjects
            try -- may trigger other script errors causing a halt in execution
               set the rect of control id  pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["top"],tRuleRect["right"],tRuleRect["bottom"]
            end try
         end repeat
      else
         switch pRule["direction"]
            case "horizontal"
               switch pRule["type"]
                  case "stretch"
                     -- divide space by number of objects-padding*(number of objects-1)
                     put round(((tRuleRect["right"]-tRuleRect["left"])-(pScale*pRule["padding"]*(the number of lines of tObjects-1)))/the number of lines of tObjects) into tObjectWidth
                     -- from left to right fit objects to space
                     put (tRuleRect["right"]-tRuleRect["left"]) mod the number of lines of tObjects into tRemainder
                     repeat for each line tObjectIndex in tObjects
                        if tRemainder > 0 then
                           put 1 into tRemainderShift
                        else
                           put 0 into tRemainderShift
                        end if
                        try -- may trigger other script errors causing a halt in execution
                           set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["top"],tRuleRect["left"]+tObjectWidth+tRemainderShift,tRuleRect["bottom"]
                        end try
                        add round(pScale*pRule["padding"]+tObjectWidth+tRemainderShift) to tRuleRect["left"]
                        subtract 1 from tRemainder
                     end repeat
                     break
                  case "position"
                     if pRule["align"] is "center" then
                        put tRuleRect["top"] + (tRuleRect["bottom"]-tRuleRect["top"]) div 2 into tRuleRect["center"]
                     end if
                     repeat for each line tObjectIndex in tObjects
                        try -- may trigger other script errors causing a halt in execution
                           switch pRule["align"]
                              case "center"
                                 local tTop
                                 put tRuleRect["center"]-the height of control id pRule["objects"][tObjectIndex]["id"] div 2 into tTop
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tTop,tRuleRect["left"]+the width of control id pRule["objects"][tObjectIndex]["id"],tTop+the height of control id pRule["objects"][tObjectIndex]["id"]
                                 break
                              case "top"
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["top"],tRuleRect["left"]+the width of  control id pRule["objects"][tObjectIndex]["id"],tRuleRect["top"]+the height of control id pRule["objects"][tObjectIndex]["id"]
                                 break
                              case "bottom"
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["bottom"]-the height of control id pRule["objects"][tObjectIndex]["id"],tRuleRect["left"]+the width of  control id pRule["objects"][tObjectIndex]["id"],tRuleRect["bottom"]
                                 break
                              default
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["top"],tRuleRect["left"]+the width of  control id pRule["objects"][tObjectIndex]["id"],tRuleRect["bottom"]
                           end switch
                        end try
                        add round(pScale*pRule["padding"]+the width of control id pRule["objects"][tObjectIndex]["id"]) to tRuleRect["left"]
                     end repeat
                     break
               end switch
               break
            case "vertical"
               switch pRule["type"]
                  case "stretch"
                     -- divide space by number of objects-padding*(number of objects-1)
                     put round(((tRuleRect["bottom"]-tRuleRect["top"])-(pScale*pRule["padding"]*(the number of lines of tObjects-1)))/the number of lines of tObjects) into tObjectHeight
                     -- from left to right fit objects to space
                     put (tRuleRect["bottom"]-tRuleRect["top"]) mod the number of lines of tObjects into tRemainder
                     repeat for each line tObjectIndex in tObjects
                        if tRemainder > 0 then
                           put 1 into tRemainderShift
                        else
                           put 0 into tRemainderShift
                        end if
                        try -- may trigger other script errors causing a halt in execution
                           set the rect of control id  pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["top"],tRuleRect["right"],tRuleRect["top"]+tObjectHeight+tRemainderShift
                        end try
                        add round(pScale*pRule["padding"]+tObjectHeight+tRemainderShift) to tRuleRect["top"]
                        subtract 1 from tRemainder
                     end repeat
                     break
                  case "position"
                     if pRule["align"] is "center" then
                        put tRuleRect["left"] + (tRuleRect["right"]-tRuleRect["left"]) div 2 into tRuleRect["center"]
                     end if
                     repeat for each line tObjectIndex in tObjects
                        try -- may trigger other script errors causing a halt in execution
                           switch pRule["align"]
                              case "center"
                                 local tLeft
                                 put tRuleRect["center"]-the with of control id pRule["objects"][tObjectIndex]["id"] div 2 into tTop
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tLeft,tRuleRect["top"],tLeft+the width of control id pRule["objects"][tObjectIndex]["id"],tRuleRect["top"]+the height of  control id pRule["objects"][tObjectIndex]["id"]
                                 break
                              case "left"
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["top"],tRuleRect["left"]+the width of  control id pRule["objects"][tObjectIndex]["id"],tRuleRect["top"]+the height of control id pRule["objects"][tObjectIndex]["id"]
                                 break
                              case "right"
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["right"]-the width of control id pRule["objects"][tObjectIndex]["id"],tRuleRect["top"],tRuleRect["right"],tRuleRect["top"]+the height of control id pRule["objects"][tObjectIndex]["id"]
                                 break
                              default
                                 set the rect of control id pRule["objects"][tObjectIndex]["id"] to tRuleRect["left"],tRuleRect["top"],tRuleRect["right"],tRuleRect["top"]+the height of control id pRule["objects"][tObjectIndex]["id"]
                           end switch
                           add round(pScale*pRule["padding"]+the height of control id pRule["objects"][tObjectIndex]["id"]) to tRuleRect["top"]
                        end try
                     end repeat
                     break
               end switch
               break
         end switch
      end if
   end if
end _mAppUpdateLayoutRule

command mAppScaleStack
   local tScale,tControlIDs,tObj
   put mAppPixelDensity() into tScale
   -- no need to scale anything if the pixel density is the same as the app is developed in
   if tScale is 1 then exit mAppScaleStack
   -- handle stack textSize
   if the textSize of the target <> "" then
      set the textSize of the target to round(the textSize of the target*tScale)
   end if
   # dispatch once for each shared group
   repeat for each line tSharedGroup in the sharedGroupIDs of the target
      dispatch "mAppScaleObject" to background id tSharedGroup of the target with tScale
   end repeat
   
   # gather ids first because reseting the datagrids messes with the numbers
   # would be good if there was a controlIDs function....
   repeat for each line tCardID in the cardIDs of the target
      repeat with tControl=1 to the number of controls of cd id tCardID of the target
         if the long id of the owner of control tControl of cd id tCardID of the target is the long id of cd id tCardID of the target then
            put the short id of control tControl of cd id tCardID of the target&cr after tControlIDs
         end if
      end repeat
   end repeat
   repeat for each line tControlID in tControlIDs
      if there is a control id tControlID of the target then
         ## dispatch once for each control on a card that is not a shard group and who's owner is the card
         put the long ID of control id tControlID of the target into tObj
         if word 1 of tObj is "group" and the sharedBehavior of tObj then next repeat
         if word 1 of the owner of tObj is "card" then
            dispatch "mAppScaleObject" to tObj with tScale
         end if
      end if
   end repeat
end mAppScaleStack

command mAppScaleObject pScale,pGroupOffset
   local tRect,tScaledPoints,tPoints,tMargins,tControlIDs,tTabStops,tTextHeight,tColumnWidths
   -- here groups complicate things because relocating them changes the rects of
   -- their child objects. Let groups resize around objects if they are unlocked.
   -- margins
   put the margins of the target into tMargins
   put item 1 to 4 of (tMargins,tMargins,tMargins,tMargins) into tMargins
   repeat with X=1 to 4
      if item X of tMargins <> "" then
         ##! WORKAROUND BUG http://quality.runrev.com/show_bug.cgi?id=10430
         if word 1 of the target = "field" and X = 2 then next repeat
         put round(item X of tMargins*pScale) into item X of tMargins
      end if
   end repeat
   set the margins of the target to tMargins
   -- rect
   put the rect of the target into tRect
   repeat with X=1 to 4
      if X mod 2 = 0 then
         put round((pGroupOffset["Y"]+item X of tRect)*pScale) into item X of tRect
      else
         put round((pGroupOffset["X"]+item X of tRect)*pScale) into item X of tRect
      end if
   end repeat
   if word 1 of the target is "group" then
      add the left of the target-item 1 of tRect to pGroupOffset["X"]
      add the top of the target-item 2 of tRect to pGroupOffset["Y"]
   end if
   set the lineSize of the target to round(the lineSize of the target * pScale)
   set the rect of the target to tRect
   -- text
   put the textHeight of the target into tTextHeight
   if the textSize of the target  <> "" then
      set the textSize of the target to round(the textSize of the target * pScale)
   end if
   -- graphic effects
   if the outerGlow["size"] of the target <> "" then
      set the outerGlow["size"] of the target to round(the outerGlow["size"] of the target * pScale)
      set the outerGlow["spread"] of the target to round(the outerGlow["spread"] of the target * pScale)
   end if
   if the innerGlow["size"] of the target <> "" then
      set the innerGlow["size"] of the target to round(the innerGlow["size"] of the target * pScale)
      set the innerGlow["spread"] of the target to round(the innerGlow["spread"] of the target * pScale)
   end if
   if the dropShadow["size"] of the target <> "" then
      set the dropShadow["size"] of the target to round(the dropShadow["size"] of the target * pScale)
      set the dropShadow["spread"] of the target to round(the dropShadow["spread"] of the target * pScale)
      set the dropShadow["distance"] of the target to round(the dropShadow["distance"] of the target * pScale)
   end if
   if the innerShadow["size"] of the target <> "" then
      set the innerShadow["size"] of the target to round(the innerShadow["size"] of the target * pScale)
      set the innerShadow["spread"] of the target to round(the innerShadow["spread"] of the target * pScale)
      set the innerShadow["distance"] of the target to round(the innerShadow["distance"] of the target * pScale)
   end if
   -- more specific object properties
   switch word 1 of the target
      case "graphic"
         switch the style of the target
            case "roundrect"
               set the roundRadius of the target to round(the roundRadius of the target*pScale)
               break
            case "polygon"
               if the markerDrawn of the target then
                  put the markerPoints of the target into tPoints
                  repeat for each line tLine in tPoints
                     if tLine is not empty then
                        put round(item 1 of tLine*pScale),round(item 2 of tLine*pScale) &cr after tScaledPoints
                     else
                        put "" after tScaledPoints
                     end if
                  end repeat
                  delete char -1 of tScaledPoints
                  set the markerPoints of the target to tScaledPoints
                  set the markerLineSize of the target to round(the markerLineSize of the target*pScale)
               end if
               break
         end switch
         break
      case "field"
         repeat for each item tTabStop in the tabStops of the target
            put round(tTabStop*pScale)&"," after tTabStops
         end repeat
         set the tabStops of the target to char 1 to -2 of tTabStops
         if the fixedLineHeight of the target then
            set the textHeight of the target to round(tTextHeight*pScale)
         end if
         set the firstIndent of the target to round(the firstIndent of the target*pScale)
         break
      case "group"
         if the behavior of the target contains "revDataGridLibrary" then
            -- don't scale subordinate controls
            if the dgProps["text size"] of the target is not empty then
               set the dgProps["text size"] of the target to round(the dgProps["text size"] of the target*pScale)
            end if
            if the dgProps["header text size"] of the target is not empty then
               set the dgProps["header text size"] of the target to round(the dgProps["header text size"] of the target*pScale)
            end if
            if the dgProps["fixed row height"] of the target then
               set the dgProps["row height"] of the target to round(the dgProps["row height"] of the target*pScale)
            end if
            put the dgProps["column widths"] of the target into tColumnWidths
            if tColumnWidths is not empty then
               repeat with X=1 to the number of items in tColumnWidths
                  if item X of tColumnWidths is an integer then
                     put round(item X of tColumnWidths*pScale) into item X of tColumnWidths
                  end if
               end repeat
               set the dgProps["column widths"] of the target to tColumnWidths
            end if
            dispatch "ResetList" to the target
         else
            -- scale subordiate controls
            -- for groups that scale all internal objects themselves handle
            -- mAppScaleObject and only pass if the target is me
            repeat with tControl=1 to the number of controls of the target
               put the short id of control tControl of the target&cr after tControlIDs
            end repeat
            repeat for each line tControlID in tControlIDs
               if there is a control id tControlID of the target then
                  if the long id of the owner of control id tControlID of the target is the long id of the target then
                     dispatch "mAppScaleObject" to control id tControlID of the target with pScale,pGroupOffset
                  end if
               end if
            end repeat
         end if
         break
   end switch
end mAppScaleObject 

private function _mAppFindBestStack pStacks
   local tBestResRange,tRect,tScale,tMax,tBestFitRange,tBestFitStack
   put the working screenRect into tRect
   put mAppPixelDensity() into tScale
   put max(item 3 of tRect/tScale-item 1 of tRect/tScale,item 4 of tRect/tScale-item 2 of tRect/tScale) into tMax
   put 10000000 into tBestFitRange
   repeat for each key tIndex in pStacks
      if pStacks[tIndex][the platform] is not "false" then -- allow for unset plartforms
         if pStacks[tIndex]["min"] <= tMax and pStacks[tIndex]["max"] >= tMax and pStacks[tIndex]["max"]-pStacks[tIndex]["min"] < tBestFitRange then
            put pStacks[tIndex]["name"] into tBestFitStack
            put pStacks[tIndex]["max"]-pStacks[tIndex]["min"] into tBestFitRange
         end if
      end if
   end repeat
   return tBestFitStack
end _mAppFindBestStack

###### Observer Pattern

local sObservingA

command mAppStartObserving pCommand,pFromObject
   if pFromObject is empty then
      put "*" into pFromObject
   end if
   put "" into sObservingA[pCommand][_mAppGetCaller()][pFromObject]
end mAppStartObserving

command mAppStopObserving pCommand,pFromObject
   if pFromObject is empty then
      put "*" into pFromObject
   end if
   delete variable sObservingA[pCommand][_mAppGetCaller()][pFromObject]
end mAppStopObserving

command mAppNotifyObservers pCommand,pParam1,pParam2,pParam3,pParam4,pParam5,pParam6
   local tCaller
   put _mAppGetCaller() into tCaller
   repeat for each key tObserver in sObservingA[pCommand]
      if there is a tObserver then
         repeat for each key tObservedOn in sObservingA[pCommand][tObserver]
            if tObservedOn is "*" or tObservedOn is tCaller then
               dispatch pCommand to tObserver with pParam1,pParam2,pParam3,pParam4,pParam5,pParam6
               # only notify an observer once
               exit repeat
            end if
         end repeat
      end if
   end repeat
end mAppNotifyObservers

private function _mAppGetCaller
   get item 1 to -3 of line -3 of the executionContexts
   if there is not an it then
      delete item -1 of it
   end if
   return it
end _mAppGetCaller

on errorDialog pError
   if the environment is "mobile" then
      local tObject
      put item -1 of line -1 of pError into tObject
      
      local tHandler
      put item -1 of line -2 of pError into tHandler
      
      local tLine
      put item 2 of line -2 of pError into tLine
      
      local tScriptLine
      put line tLine of the script of tObject into tScriptLine
      
      local tRuggedName
      if word 1 of tObject is "stack" then
         put the abbrev name of tObject into tRuggedName
      else
         put the abbrev name of tObject&" of "&findStack(tObject) into tRuggedName
      end if
      answer "Error in line "&tLine&" of handler "&tHandler&" of "&tRuggedName&cr&tScriptLine
   end if
   pass errorDialog
end errorDialog 

function findStack pObject
   if word 1 of pObject is "stack" then
      return the abbrev name of pObject
   else
      return findStack(the owner of pObject)
   end if
end findStack

#################################################################

# IDE Only code, move to grandparent behavior that is not included in standalone in future

on savingStandalone
   _mAppSaveStandalone
   pass savingStandalone
end savingStandalone

on standaloneSaved
   _mAppStandaloneSaved
   pass standaloneSaved
end standaloneSaved

on savingMobileStandalone
   _mAppSaveStandalone
   pass savingMobileStandalone
end savingMobileStandalone

on mobileStandaloneSaved
   _mAppStandaloneSaved
  pass mobileStandaloneSaved
end mobileStandaloneSaved

private command _mAppSaveStandalone
   set the mainstack of stack "mAppLibrary" to the short name of this stack
   save this stack
end _mAppSaveStandalone

private command _mAppStandaloneSaved
   set the mainstack of stack "mAppLibrary" to "Mobile Application Framework"
   save this stack
end _mAppStandaloneSaved

on dragEnter
   if the environment is "development" and word 1 of the target is "button" then
      set the dragAction to "copy"
   end if
   pass dragEnter
end dragEnter
