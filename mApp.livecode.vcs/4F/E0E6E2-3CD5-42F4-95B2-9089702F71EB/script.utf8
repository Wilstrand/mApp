local sCard

on revPreOpenCard
   updateUI
   pass revPreOpenCard
end revPreOpenCard

on revPreOpenStack
   updateUI
   pass revPreOpenStack
end revPreOpenStack

on revResumeStack
   updateUI
   pass revResumeStack
end revResumeStack

on revSelectedObjectChanged
   set the enabled of btn "add objects" of card "layout" to selObjsNotIncluded() <> ""
   put false into tButton
   repeat for each line tObject in the selectedObjects
      if word 1 of tObject is "button" then
         repeat for each item tGroup in "icon,hilitedIcon,disabledIcon"
            set the icon of btn "icon" of group tGroup of cd "images" to the tGroup of tObject
            if the backPattern of tObject is empty then
               set the backColor of btn "icon" of group tGroup of cd "images" to the effective backColor of tObject
            else
               set the backPattern of btn "icon" of group tGroup of cd "images" to the backPattern of tObject
            end if
         end repeat
         put true into tButton
         exit repeat
      end if
   end repeat
   put the rect of group "image" of cd "images" into tRect
   if tButton then
      if the backPattern of tObject is empty then
         set the backColor of btn "icon" of group "image" of cd "images" to the effective backColor of tObject
      else
         set the backPattern of btn "icon" of group "image" of cd "images" to the backPattern of tObject
      end if
      show group "icons" of cd "images"
      put the top of group "icons" of cd "images" into item 4 of tRect
   else
      set the backColor of btn "icon" of group "image" of cd "images" to gray
      hide group "icons" of cd "images"
      put the bottom of group "icons" of cd "images" into item 4 of tRect
   end if
   set the rect of group "image" of cd "images" to tRect
   pass revSelectedObjectChanged
end revSelectedObjectChanged

on resumeStack
   if the mode of this stack is not 1 then
      updateUI
   end if
end resumeStack


/*

mAppProps["layout"][<stepnumber>]
> ["name"] - the name of the step
> ["object"][<placement number>- the objects included in the step in their order of placement
> [<side>]["relative object"] - the object the side sould remain relative to
> [<side>]["relative distance"] - the relative distance from the relative object. Units are pixels at 163 dpi.
> [<side>]["side of relative object"] - the side of the relative object the distance is measured from
> ["type"] - the layout type either stretch (objects will stretch to fill the space) or position (in a stretchy space objects will position evenly otherwise they will position from the fixed sides out)
> ["padding"] - the padding between objects when multiple selections are made

*/

on saveLayoutProps
   local tIndex,tRuleType,tProps,tObject,tRuleTarget,tSets
   if not exists(sCard) then exit saveLayoutProps
   put the dgHilitedIndex of group "card rules" into tIndex
   put "card" into tRuleType
   if tIndex = "" then
      put the dgHilitedIndex of group "stack rules" into tIndex
      put "stack" into tRuleType
   end if
   put the dgData of group (tRuleType&&"rules") into tProps
   
   if tIndex <> "" then -- just copy props to card if not
      put the dgData of group "objects" into tProps[tIndex]["objects"]
      repeat for each item tSide in "left,top,right,bottom"
         put the text of fld (tSide&" amount") into tProps[tIndex][tSide]["relative distance"]
         if tProps[tIndex][tSide]["relative distance"] = "-" then put 0 into  tProps[tIndex][tSide]["relative distance"]
         if the label of btn (tSide&" object") is not "no object"  and the label of btn (tSide&" object") is not "card" then
            put the label of btn (tSide&" object")&" of "&sCard into tObject
            put the id of tObject into tProps[tIndex][tSide]["relative object"]
         else
            if the label of btn (tSide&" object") = "no object" then
               put "" into  tProps[tIndex][tSide]["relative object"]
            else
               put "card" into tProps[tIndex][tSide]["relative object"]
            end if
         end if
         put the label of btn (tSide&" side of object") into tProps[tIndex][tSide]["side of relative object"]
      end repeat
      put hilite of btn "hide" into tProps[tIndex]["hide"]
      put label of btn "orientation" into tProps[tIndex]["orientation"]
      put label of btn "type" into tProps[tIndex]["type"]
      put label of btn "align" into tProps[tIndex]["align"]
      put label of btn "direction" into tProps[tIndex]["direction"]
      put the text of fld "padding" into tProps[tIndex]["padding"]
      put the text of fld "min active" into tProps[tIndex]["active"]["min"]
      put the text of fld "max active" into tProps[tIndex]["active"]["max"]
   end if
   if tRuleType = "card" then
      put sCard into tRuleTarget
   else
      put the owner of sCard into tRuleTarget
   end if
   if tProps is an array then
      set the mAppProps["layout"] of tRuleTarget to tProps
   end if
   if tIndex <> "" then -- just copy props to card if not
      set the dgDataOfIndex[tIndex] of group (tRuleType&&"rules") to tProps[tIndex]
      if tRuleType = "card" then
         dispatch "mAppUpdateLayoutRule" to sCard with tProps[tIndex]["name"]
      else
         dispatch "mAppUpdateLayoutRule" to the owner of sCard with tProps[tIndex]["name"]
      end if
   end if
end saveLayoutProps

on setLayoutProps
   local tRuleType,tProps,tObject
   if the dgHilitedIndex of group "card rules" of cd "layout" <> "" or the dgHilitedIndex of group "stack rules" of cd "layout" <> "" then
      if the dgHilitedIndex of group "card rules" of cd "layout" <> "" then
         put "card" into tRuleType
      else
         put "stack" into tRuleType
      end if
      put the dgDataOfIndex[the dgHilitedIndex of group (tRuleType&&"rules") of cd "layout"] of group (tRuleType&&"rules")  of cd "layout" into tProps
      set the dgData of group "objects" of cd "layout" to tProps["objects"]
      repeat for each item tSide in "left,top,right,bottom"
         if tProps[tSide]["relative distance"] = "" then put 0 into tProps[tSide]["relative distance"]
         set the text of fld (tSide&" amount") of cd "layout" to tProps[tSide]["relative distance"]
         if tProps[tSide]["relative object"] = "" or tProps[tSide]["relative object"] = " " or tProps[tSide]["relative object"] = "no object" then
            set the label of btn (tSide&" object") of cd "layout" to "no object"
         else if tProps[tSide]["relative object"] = "card" then
            set the label of btn (tSide&" object") of cd "layout" to "card"
         else
            put "control id "&tProps[tSide]["relative object"]&" of "&sCard into tObject
            if there is a tObject then
               set the label of btn (tSide&" object") of cd "layout" to the abbrev name of tObject
            else
               set the label of btn (tSide&" object") of cd "layout" to " "
            end if
         end if
         if tProps[tSide]["side of relative object"] = "" then
            set the label of btn (tSide&" side of object") of cd "layout" to tSide
         else
            set the label of btn (tSide&" side of object") of cd "layout" to tProps[tSide]["side of relative object"]
         end if
      end repeat
      set hilite of btn "hide" of card "layout" to tProps["hide"]=true
      if tProps["orientation"] = "" then 
         set label of btn "orientation" of card "layout"  to "both"
      else
         set label of btn "orientation" of card "layout"  to tProps["orientation"]
      end if
      if tProps["type"] = "" then 
         set label of btn "type" of card "layout"  to "position"
      else
         set label of btn "type" of cd "layout" to tProps["type"]
      end if
      if tProps["align"] = "" then 
         set label of btn "align" of card "layout"  to "center"
      else
         set label of btn "align" of cd "layout" to tProps["align"]
      end if
      if tProps["direction"] = "" then 
         set label of btn "direction" of card "layout"  to "horizontal"
      else
         set label of btn "direction" of cd "layout" to tProps["direction"]
      end if
      if tProps["padding"] = "" then 
         set the text of fld "padding" of cd "layout" to 0
      else
         set the text of fld "padding" of cd "layout" to tProps["padding"]
      end if
      if tProps["active"]["min"] = "" then
         set the text of fld "min active" of cd "layout" to 0
      else
         set the text of fld "min active" of cd "layout" to tProps["active"]["min"]
      end if
      if tProps["active"]["max"] = "" then
         set the text of fld "max active" of cd "layout" to 65535
      else
         set the text of fld "max active" of cd "layout" to tProps["active"]["max"]
      end if
   else
      set the dgData of group "objects" of cd "layout" to ""
      repeat for each item tSide in "left,top,right,bottom"
         set the text of fld (tSide&" amount") of cd "layout" to ""
         set the label of btn (tSide&" object") of cd "layout" to " "
         set the label of btn (tSide&" side of object") of cd "layout" to " "
      end repeat
      set hilite of btn "hide" of card "layout"  to true
      set label of btn "orientation" of card "layout"  to "both"
      set label of btn "type" of cd "layout" to "stretch"
      set label of btn "align" of cd "layout" to "justify"
      set label of btn "direction" of cd "layout" to "horizontal"
      set the text of fld "padding" of cd "layout" to ""
   end if
end setLayoutProps

on addRule
   local tRuleType,tData
   answer question "Would you like the rule to apply to just this card or the whole stack?" with "Stack" or "Card" or "Cancel" as sheet
   if it is "cancel" then exit addRule
   put it into tRuleType
   put "Rule #"&the dgNumberOfRecords of group (tRuleType&&"rules")+1 into tData["name"]
   dispatch "addData" to group (tRuleType&&"rules") with tData
   set the dgHilitedIndex of group (tRuleType&&"rules") to the result
   if tRuleType = "card" then
      set the dgHilitedIndex of group "stack rules" to ""
   else
      set the dgHilitedIndex of group "card rules" to ""
   end if
   set the dgData of group "objects" to ""
   setLayoutProps
   addObjects
   saveLayoutProps
end addRule

on deleteRule
   local tRuleType,tIndex,tRuleOwner
   put "card" into tRuleType
   put the dgHilitedIndex of group "card rules" into tIndex
   put sCard into tRuleOwner
   if tIndex is "" then
      put "stack" into tRuleType
      put the dgHilitedIndex of group "stack rules" into tIndex
      put the owner of sCard into tRuleOwner
      if tIndex is "" then exit deleteRule
   end if
   dispatch "DeleteIndex" to group (tRuleType&&"rules") with tIndex
   put the customProperties["mAppProps"] of tRuleOwner into tProps
   delete variable tProps["layout"][tIndex]
   if tProps["layout"] is not an array then
      delete variable tProps["layout"]
   end if
   set the customProperties["mAppProps"] of tRuleOwner to tProps
end deleteRule

on refreshRule
   local tRuleType,tIndex,tData
   put "card" into tRuleType
   put the dgHilitedIndex of group "card rules" into tIndex
   if tIndex is "" then
      put "stack" into tRuleType
      put the dgHilitedIndex of group "stack rules" into tIndex
      if tIndex is "" then exit refreshRule
   end if
   put the dgDataOfIndex[tIndex] of group (tRuleType&&"rules") into tData
   if tRuleType = "card" then
      dispatch "mAppUpdateCardLayoutRule" to sCard with tData["name"]
   else
      dispatch "mAppUpdateStackLayoutRule" to the owner of sCard with tData["name"]
   end if
end refreshRule

on addObjects
   local tObject,tData
   repeat for each line tObject in selObjsNotIncluded()
      put the short id of tObject into tData["id"]
      dispatch "addData" to group "objects" of cd "layout" with tData
   end repeat
   saveLayoutProps
end addObjects

on deleteObjects
   dispatch "deleteIndexes" to group "objects" of cd "layout" with the dgHilitedIndexes of group "objects" of cd "layout"
   saveLayoutProps
end deleteObjects

function selObjsNotIncluded
   local tObjs,tObjects,tReturn,tObject
   put the dgData of group "objects" of card "layout" into tObjs
   repeat for each key tIndex in tObjs
      put tObjs[tIndex]["name"] into line tIndex of tObjects
   end repeat
   repeat for each line tObject in the selObjs
      put the long id of tObject into tObject
      -- rugged id
      -- should be a substack anyway but just check
      if  word 1 to -4 of tObject contains " of stack " then
         delete word -3 to -1 of tObject
      else
         put the abbrev name of the topStack into word -2 to -1 of tObject
      end if
      if tObject is not among the lines of tObjects then
         put tObject & cr after tReturn
      end if
   end repeat
   delete char -1 of tReturn
   return tReturn
end selObjsNotIncluded


function cardObjsNotIncluded pObject
   local tObject,tObjs,tObjects,tReturn
   put empty into tObject
   put the dgData of group "objects" of card "layout" into tObjs
   repeat for each key tIndex in tObjs
      get MatchText(the long name of control id tObjs[tIndex]["id"] of the topStack,"(?i)([a-z0-9_\-\(\){}\[\]|!~`<>,./\?\\':;@#\$%^&\" ]*) of card",tObject)
      put tObject into line tIndex of tObjects
   end repeat
   if pObject = "" then 
      put sCard into pObject
   else
      get MatchText(the long name of pObject,"(?i)([a-z0-9_\-\(\){}\[\]|!~`<>,./\?\\':;@#\$%^&\" ]*) of card",tObject)
      if tObject is not among the lines of tObjects then
         put tObject & cr after tReturn
      end if
   end if
   if (word 1 of pObject is among the items of "group,background" and the selectGroupedControls of pObject) or word 1 of pObject = "card" then
      repeat with X=1 to the number of controls of pObject
         if the long id of the owner of control X of pObject is pObject then
            put cardObjsNotIncluded(the long id of control X of pObject) &cr after tReturn
         end if
      end repeat
   end if
   filter tReturn without empty
   return tReturn
end cardObjsNotIncluded

on updateUI
   local tSubstacks,tStacks,tProps,tIndex,tData,tCurrentDefaultStack,tOldCard,tMainLabel,tUILabel,tIconStack
   try -- required during build.... needs investigation
      set the menuHistory of btn "tab" to the number of this cd
      if the behavior of stack the mainstack of the topStack is not empty and \
            the long id of the behavior of stack the mainstack of the topStack = the long id of button "Mainstack Behavior" of stack "mAppLibrary" then
         put the substacks of stack the mainstack of the topStack into tSubstacks
         sort tSubstacks
         put tSubstacks into tStacks
         put 1 into tIndex
         repeat for each line tStack in tSubstacks
            if word 1 of tStack is "mAppImages" then put tStack into tIconStack
            put the mAppProps["UIStack"] of stack tStack into tProps
            if tProps is an array then
               filter tStacks without tStack
               put tProps into tData[tIndex]
               put tStack into tData[tIndex]["name"]
               put the label of stack tStack into tData[tIndex]["label"]
               add 1 to tIndex
            end if
         end repeat
         set the dgData of group "uistacks" of cd "UI stacks" to tData
         put tStacks into btn "stacks" of cd "UI Stacks"
         if tStacks = "" then 
            set the label of btn "stacks" of cd "UI Stacks" to " "
            disable btn "add ui stack" of cd "UI Stacks"
            disable btn "stacks" of cd "UI Stacks"
         else
            enable btn "add ui stack" of cd "UI Stacks"
            enable btn "stacks" of cd "UI Stacks"
         end if
         put the mAppProps["layout"] of the topStack into tProps
         delete variable tProps[""]
         put the defaultStack into tCurrentDefaultStack
         set the defaultStack to the topStack
         put sCard into tOldCard
         put the long id of this cd into sCard
         set the defaultStack to tCurrentDefaultStack
         if the label of stack the mainstack of the topStack <> "" then
            put the label of stack the mainstack of the topStack into tMainLabel
         else
            put the mainstack of the topStack into tMainLabel
         end if
         if the label of the topStack <> "" then
            put the label of the topStack into tUILabel
         else
            put the short name of the topStack into tUILabel
         end if
         if short name of the topStack = the mainstack of the topStack then
            set the label of me to tMainLabel
         else
            set the label of me to tMainLabel&&">" && tUILabel &&">"&& \
                  the short name of sCard
         end if
         set the dgData of group "stack rules" of cd "layout" to tProps
         if sCard <> tOldCard then
            put the mAppProps["layout"] of sCard into tProps
            delete variable tProps[""]
            set the dgData of group "card rules" of cd "Layout" to tProps
            if the number of lines of keys(tProps) > 0 then
               set the dgHilitedIndex of group "card rules" of cd "Layout" to 1
            end if
            setLayoutProps
         end if
         if tIconStack is not empty then
            delete variable tData
            repeat with tIndex=1 to the number of images of stack tIconStack
               put the short name of image tIndex of stack tIconStack into tData[tIndex]["name"]
               put the id of image tIndex of stack tIconStack into tData[tIndex]["id"]
            end repeat
            set the dgData of group "images" of cd "images" to tData
            if tData is an array then
               dispatch "SortDataByKey" to group "images" of cd "images" with "name"
               set the dgHilitedLine of group "images" of cd "images" to 1
               set the icon of btn "icon" of group "image" of cd "images" to tData[1]["id"]
            end if
         else
            set the dgData of group "images" of cd "images" to ""
            set the icon of btn "icon" of group "image" of cd "images" to 0
         end if
      else
         put "" into sCard
         clearAll
      end if
   end try
end updateUI

on newApp
   local tName,tMain,tUI,tProps
   reset the templateStack
   ask question "What would you like to call your new app?"  titled "App Name"  as sheet
   if the result is "cancel" then exit newApp
   put it into tName
   lock screen
   create invisible stack tName
   put it into tMain
   set the label of tMain to tName
   set the behavior tMain to the long id of btn "Mainstack behavior" of stack "mAppLibrary"
   set the mAppProps["object references fixed"] of tMain to true
   create stack (tName&&"phone")
   put it into tUI
   set the label of tUI to (tName&&"phone")
   set the mainstack of tUI to tName
   put 0 into tProps["min"]
   put 65535 into tProps["max"]
   put true into tProps["acceleratedRendering"]
   put true into tProps["portrait"]
   put true into tProps["portrait upside down"]
   set the mAppProps["UIStack"] of tUI to tProps
   set the width of tUI to 320
   set the height of tUI to 480
   set the cRevStandaloneSettings["Linux"] of tMain to false
   set the cRevStandaloneSettings["MacOSX"] of tMain to false
   set the cRevStandaloneSettings["Windows"] of tMain to false
   set the cRevStandaloneSettings["iOS"] of tMain to true
   set the cRevStandaloneSettings["iOS"] of tMain to true
   set the cRevStandaloneSettings["iOS,bundle id"] of tMain to "com.yourcompany."&replaceText(toLower(tName)," ","")
   set the cRevStandaloneSettings["name"] of tMain to tName
   set the cRevStandaloneSettings["iOS,display name"] of tMain to tName
   set the cRevStandaloneSettings["android"] of tMain to true
   set the cRevStandaloneSettings["android,label"] of tMain to tName
   set the cRevStandaloneSettings["android,identifier"] of tMain to "com.yourcompany."&replaceText(toLower(tName)," ","")
   close tMain
   set the visible of tMain to true
end newApp

command addImages pFilePaths
   local tSubstacks,tSelf,tData,tIconStack,tMain
   lock messages
   put the short name of this stack into tSelf
   put the  the mainstack of the topStack into tMain
   put the substacks of stack tMain into tSubstacks
   filter tSubstacks with "mAppImages *"
   put line 1 of tSubstacks into tIconStack
   if tIconStack is empty then 
      put "mAppImages "&the seconds into tIconStack
      create invisible stack tIconStack
      -- a clumsy attempt at id namespace... should work reasonably well
      set the id of stack tIconStack to random(2100000000)+300000
      set the mainstack of stack tIconStack to tMain
      close stack tIconStack
      set the visible of stack tIconStack to true
   end if
   set the itemDel to "."
   set the visible of stack tIconStack to false
   go tIconStack
   repeat for each line tImagePath in pFilePaths
      if item -1 of tImagePath is among the items of "png.jpg.jpeg.gif" then
         import paint from file tImagePath
         set the lockLocation of the last image to true
         set the resizeQuality of the last image to "good"
         set the width of the last image to round(the width of the last image / 2)
         set the height of the last image to round(the height of the last image / 2)
         put the id of the last image into tData["id"]
         put the short name of the last image into tData["name"]
         dispatch "AddData" to group "images" of card "images" of stack tSelf with tData
      end if
   end repeat
   close stack tIconStack
   set the visible of stack tIconStack to true
   dispatch "SortDataByKey" to group "images" of cd "images" of stack tSelf with "name"
   return tData["id"]
end addImages

on lcVCSExport
   if the target is not me then exit lcVCSExport
   clearAll
end lcVCSExport

on clearAll
   set the dgData of group "images" of cd "images" to ""
   set the icon of btn "icon" of group "image" of cd "images" to 0
   set the icon of btn "icon" of group "icon" of cd "images" to 0
   set the icon of btn "icon" of group "hilitedIcon" of cd "images" to 0
   set the icon of btn "icon" of group "disabledIcon" of cd "images" to 0
   set the dgData of group "uistacks" of cd "UI stacks" to ""
   set the label of btn "stacks" of cd "ui stacks" to " "
   set the dgData of group "card rules" of cd "Layout" to ""
   set the dgData of group "stack rules" of cd "Layout" to ""
   set the dgData of group "objects" of cd "Layout" to ""
   set the label of me to "mApp (Mobile Application Framework)"
  repeat for each item tSide in "left,top,right,bottom"
      set the text of fld (tSide&" amount") of cd "layout" to ""
      set the label of btn (tSide&" object") of cd "layout" to " "
      set the label of btn (tSide&" side of object") of cd "layout" to " "
   end repeat
   set hilite of btn "hide" of card "layout"  to true
   set label of btn "orientation" of card "layout"  to "both"
   set label of btn "type" of cd "layout" to "position"
   set label of btn "direction" of cd "layout" to "horizontal"
   set the text of fld "padding" of cd "layout" to ""
   set the text of btn "align" of cd "layout" to ""
   set the label of btn "align"of cd "layout"  to "center"
end clearAll
