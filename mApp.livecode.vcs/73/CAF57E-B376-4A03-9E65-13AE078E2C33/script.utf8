-- This script defines the behavior of your data grid's custom template. This behavior
-- only applies to 'forms' and not 'tables'.

on FillInData pDataArray
   -- This message is sent when the Data Grid needs to populate
   -- this template with the data from a record. pDataArray is an
   -- an array containing the records data.
   -- You do not need to resize any of your template's controls in
   -- this message. All resizing should be handled in resizeControl.
   
   -- Example:
   if pDataArray["label"] = "" then
      set the text of field "name" of me to pDataArray["name"]
   else
      set the text of field "name" of me to pDataArray["name"]&&"("&pDataArray["label"]&")"
   end if
   set the text of field "min" of me to pDataArray["min"]
   set the text of field "max" of me to pDataArray["max"]
   set the hilite of btn "portrait" of me to pDataArray["portrait"]=true
   set the hilite of btn "landscape left" of me to pDataArray["landscape left"]=true
   set the hilite of btn "landscape right" of me to pDataArray["landscape right"]=true
   set the hilite of btn "portrait upside down" of me to pDataArray["portrait upside down"]=true
   set the hilite of btn "acceleratedRendering" of me to pDataArray["acceleratedRendering"]=true
   set the hilite of btn "iOS" of me to pDataArray["iphone"]=true
   set the hilite of btn "Android" of me to pDataArray["Android"]=true
   set the hilite of btn "Windows" of me to pDataArray["Win32"]=true
   set the hilite of btn "OS X" of me to pDataArray["MacOS"]=true
   set the hilite of btn "Linux" of me to pDataArray["Linux"]=true
end FillInData


on LayoutControl pControlRect
   local theFieldRect
   
   -- This message is sent when you should layout your template's controls.
   -- This is where you resize the 'Background' graphic, resize fields and 
   -- position objects.
   -- For fixed height data grid forms you can use items 1 through 4 of pControlRect as
   -- boundaries for laying out your controls.
   -- For variable height data grid forms you can use items 1 through 3 of pControlRect as
   -- boundaries, expanding the height of your control as needed.
   
   -- Example:
   --    put the rect of field "Label" of me into theFieldRect
   --    put item 3 of pControlRect - 5 into item 3 of theFieldRect
   --    set the rect of field "Label" of me to theFieldRect
   
   --    set the rect of graphic "Background" of me to pControlRect
end LayoutControl


on ResetData
   -- Sent when data is being emptied because the control is no longer being used to display data
   set the text of field "name" of me to empty
   set the text of field "min" of me to empty
   set the text of field "max" of me to empty
   set the hilite of btn "portrait" of me to false
   set the hilite of btn "landscape left" of me to false
   set the hilite of btn "landscape right" of me to false
   set the hilite of btn "portrait upside down" of me to false
   set the hilite of btn "acceleratedRendering" of me to false
   set the hilite of btn "iOS" of me to false
   set the hilite of btn "Android" of me to false
   set the hilite of btn "Windows" of me to false
   set the hilite of btn "OS X" of me to false
   set the hilite of btn "Linux" of me to false
end ResetData


on PreFillInData
    -- Sent right before new data is going to replace existing data in the control
end PreFillInData


setprop dgHilite pBoolean
    -- This custom property is set when the highlight of your custom template has
    -- changed. By default the "Background" graphic will be highlighted for you. 
    -- You only add script here if you want to further customize the highlight.
    
    -- Example:
    if pBoolean then
        set the foregroundColor of me to the dgProp["hilited text color"] of the dgControl of me
    else
        set the foregroundColor of me to empty
    end if
end dgHilite


getprop dgDataControl
    -- Required by library so that it can locate your control.
    return the long ID of me
end dgDataControl

on mouseUp
   put the dgDataOfIndex[the dgIndex of me] of me into tData
   switch the short name of the target
      case "add"
         ask question "What would you like to label your new stack?" with "tablet"
         if the result is not "cancel" then
            put it into tLabel
            put "UI "&the seconds into tName
            clone stack tData["name"]
            set the name of it to tName
            set the mainStack of stack tName to the mainStack of stack tData["name"]
            set the label stack tName to tLabel
            put 0 into tProps["min"]
            put 9999999 into tProps["max"]
            set the mAppProps["UIStack"] of stack tName to tProps
            set the width of stack tName to 320
            set the height of stack tName to 480
         end if
         updateUI
         break
      case "delete"
         send DeleteIndex&&the dgIndex of me to the owner of me in 0 milliseconds
         put the customProperties["mAppProps"] of stack tData["name"] into tProps
         delete variable tProps["UIStack"]
         set the customProperties["mAppProps"] of stack tData["name"] to tProps
         updateUI
         break
      case "min"
      case "max"
         break
      case "portrait"
      case "portrait upside down"
      case "landscape left"
      case "landscape right"
      case "acceleratedRendering"
      case "Android"
      case "Linux"
         put the hilite of the target into tData[the short name of the target]
         break
      case "iOS"
         put the hilite of the target into tData["iphone"]
         break
      case "OS X"
         put the hilite of the target into tData["MacOS"]
        break
      case "Windows"
         put the hilite of the target into tData["Win32"]
         break
      default
         toplevel tData["name"]
         exit mouseUp
         break
   end switch
   set the mAppProps["UIStack"] of stack tData["name"] to tData
   set the dgDataOfIndex[the dgIndex of me] of me to tData
end mouseUp

on closeField
   put the dgDataOfIndex[the dgIndex of me] of me into tData
   switch the short name of the target
      case "min"
      case "max"
         put the text of the target into tData[the short name of the target]
         set the mAppProps["UIStack"] of stack tData["name"] to tData
         set the dgDataOfIndex[the dgIndex of me] of me to tData
         break
   end switch
end closeField
